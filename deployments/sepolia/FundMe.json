{
  "address": "0x17Bc0EbAe5A71138c2eF9BF961Ace10D1d8e5E04",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Fundme_NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcde39cede76dc87a5e5a43133f5326a3c41a0bfe9a717415d133d6039d206f69",
  "receipt": {
    "to": null,
    "from": "0x457014Ae21e9732936a4e1B5A34dcE77544DaB87",
    "contractAddress": "0x17Bc0EbAe5A71138c2eF9BF961Ace10D1d8e5E04",
    "transactionIndex": 88,
    "gasUsed": "1059780",
    "logsBloom": "0x
    "blockHash": "0x7932dc80dad09fd89cf81c78d365a21bc9af382114ef0c3bcb0a3f17012b7307",
    "transactionHash": "0xcde39cede76dc87a5e5a43133f5326a3c41a0bfe9a717415d133d6039d206f69",
    "logs": [],
    "blockNumber": 5511850,
    "cumulativeGasUsed": "8338645",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 3,
  "solcInputHash": "a7c5c5b432f86d921e5234be79c97d53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Fundme_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror Fundme_NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private  s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private  immutable  i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    \\n    AggregatorV3Interface public s_priceFeed ;\\n\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    } \\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert Fundme_NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public  onlyOwner {\\n            address[] memory funders = s_funders;\\n            for(uint256 funderIndex = 0;funderIndex < funders.length;funderIndex++){\\n                address funder = funders[funderIndex];\\n                s_addressToAmountFunded[funder]= 0;\\n            }\\n            s_funders = new address[](0);\\n            (bool success,) = i_owner.call{value:address(this).balance}(\\\"\\\");\\n            require(success);\\n \\n\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    function getOwner() public view returns (address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address){\\n        return s_funders[index];\\n    }\\n    function getAddressToAmountFunded(address funder)public view returns(uint256) {\\n            return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPrice() public view returns (AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n\\n\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n\",\"keccak256\":\"0xc025b98d726bd83679ac2ad197848b3579c39bd93aad23496578f3a1cb56af3d\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x350714a2ea6cc3b12aa690a0697df5d82a2986d90291c123c61e99a808c0a356\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200135238038062001352833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111cc62000186600039600081816103ab015281816105fa0152818161064a015261084001526111cc6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d57806398d5fdca14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b04565b61033b565b6040516100d79190610b4a565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610bc4565b60405180910390f35b34801561011757600080fd5b506101206103a9565b005b34801561012e57600080fd5b506101376105e9565b6040516101449190610b4a565b60405180910390f35b34801561015957600080fd5b506101626105f6565b60405161016f9190610bee565b60405180910390f35b34801561018457600080fd5b5061018d61061e565b60405161019a9190610bc4565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c2610648565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610c35565b6108d6565b6040516101f89190610bee565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461091e90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610cbf565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610d0e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042e576040517f87b53d7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104d95760006001828154811061045457610453610d64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104d190610d93565b915050610431565b50600067ffffffffffffffff8111156104f5576104f4610ddc565b5b6040519080825280602002602001820160405280156105235781602001602082028036833780820191505090505b50600190805190602001906105399291906109fa565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056090610e3c565b60006040518083038185875af1925050503d806000811461059d576040519150601f19603f3d011682016040523d82523d6000602084013e6105a2565b606091505b50509050806105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd90610e9d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cd576040517f87b53d7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561075157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610707575b5050505050905060005b81518110156107db57600082828151811061077957610778610d64565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107d390610d93565b91505061075b565b50600067ffffffffffffffff8111156107f7576107f6610ddc565b5b6040519080825280602002602001820160405280156108255781602001602082028036833780820191505090505b506001908051906020019061083b9291906109fa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161088290610e3c565b60006040518083038185875af1925050503d80600081146108bf576040519150601f19603f3d011682016040523d82523d6000602084013e6108c4565b606091505b50509050806108d257600080fd5b5050565b6000600182815481106108ec576108eb610d64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061092a8361095a565b90506000670de0b6b3a764000085836109439190610ebd565b61094d9190610f46565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db9190611004565b5050509150506402540be400816109f2919061107f565b915050919050565b828054828255906000526020600020908101928215610a73579160200282015b82811115610a725782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a1a565b5b509050610a809190610a84565b5090565b5b80821115610a9d576000816000905550600101610a85565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ad182610aa6565b9050919050565b610ae181610ac6565b8114610aec57600080fd5b50565b600081359050610afe81610ad8565b92915050565b600060208284031215610b1a57610b19610aa1565b5b6000610b2884828501610aef565b91505092915050565b6000819050919050565b610b4481610b31565b82525050565b6000602082019050610b5f6000830184610b3b565b92915050565b6000819050919050565b6000610b8a610b85610b8084610aa6565b610b65565b610aa6565b9050919050565b6000610b9c82610b6f565b9050919050565b6000610bae82610b91565b9050919050565b610bbe81610ba3565b82525050565b6000602082019050610bd96000830184610bb5565b92915050565b610be881610ac6565b82525050565b6000602082019050610c036000830184610bdf565b92915050565b610c1281610b31565b8114610c1d57600080fd5b50565b600081359050610c2f81610c09565b92915050565b600060208284031215610c4b57610c4a610aa1565b5b6000610c5984828501610c20565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ca9601b83610c62565b9150610cb482610c73565b602082019050919050565b60006020820190508181036000830152610cd881610c9c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d1982610b31565b9150610d2483610b31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5957610d58610cdf565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d9e82610b31565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd157610dd0610cdf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e26600083610e0b565b9150610e3182610e16565b600082019050919050565b6000610e4782610e19565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e87600b83610c62565b9150610e9282610e51565b602082019050919050565b60006020820190508181036000830152610eb681610e7a565b9050919050565b6000610ec882610b31565b9150610ed383610b31565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f0c57610f0b610cdf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f5182610b31565b9150610f5c83610b31565b925082610f6c57610f6b610f17565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f9681610f77565b8114610fa157600080fd5b50565b600081519050610fb381610f8d565b92915050565b6000819050919050565b610fcc81610fb9565b8114610fd757600080fd5b50565b600081519050610fe981610fc3565b92915050565b600081519050610ffe81610c09565b92915050565b600080600080600060a086880312156110205761101f610aa1565b5b600061102e88828901610fa4565b955050602061103f88828901610fda565b945050604061105088828901610fef565b935050606061106188828901610fef565b925050608061107288828901610fa4565b9150509295509295909350565b600061108a82610fb9565b915061109583610fb9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110d4576110d3610cdf565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561111157611110610cdf565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114e5761114d610cdf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118b5761118a610cdf565b5b82820290509291505056fea264697066735822122076d6a11b18cdb1ee22abc7f5465dd70a55dc38038f9c53db37cb81020871d9d764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d57806398d5fdca14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630ec3b027146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b04565b61033b565b6040516100d79190610b4a565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610bc4565b60405180910390f35b34801561011757600080fd5b506101206103a9565b005b34801561012e57600080fd5b506101376105e9565b6040516101449190610b4a565b60405180910390f35b34801561015957600080fd5b506101626105f6565b60405161016f9190610bee565b60405180910390f35b34801561018457600080fd5b5061018d61061e565b60405161019a9190610bc4565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c2610648565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610c35565b6108d6565b6040516101f89190610bee565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461091e90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610cbf565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610d0e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042e576040517f87b53d7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104d95760006001828154811061045457610453610d64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104d190610d93565b915050610431565b50600067ffffffffffffffff8111156104f5576104f4610ddc565b5b6040519080825280602002602001820160405280156105235781602001602082028036833780820191505090505b50600190805190602001906105399291906109fa565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161056090610e3c565b60006040518083038185875af1925050503d806000811461059d576040519150601f19603f3d011682016040523d82523d6000602084013e6105a2565b606091505b50509050806105e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dd90610e9d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cd576040517f87b53d7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561075157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610707575b5050505050905060005b81518110156107db57600082828151811061077957610778610d64565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107d390610d93565b91505061075b565b50600067ffffffffffffffff8111156107f7576107f6610ddc565b5b6040519080825280602002602001820160405280156108255781602001602082028036833780820191505090505b506001908051906020019061083b9291906109fa565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161088290610e3c565b60006040518083038185875af1925050503d80600081146108bf576040519150601f19603f3d011682016040523d82523d6000602084013e6108c4565b606091505b50509050806108d257600080fd5b5050565b6000600182815481106108ec576108eb610d64565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061092a8361095a565b90506000670de0b6b3a764000085836109439190610ebd565b61094d9190610f46565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db9190611004565b5050509150506402540be400816109f2919061107f565b915050919050565b828054828255906000526020600020908101928215610a73579160200282015b82811115610a725782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a1a565b5b509050610a809190610a84565b5090565b5b80821115610a9d576000816000905550600101610a85565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ad182610aa6565b9050919050565b610ae181610ac6565b8114610aec57600080fd5b50565b600081359050610afe81610ad8565b92915050565b600060208284031215610b1a57610b19610aa1565b5b6000610b2884828501610aef565b91505092915050565b6000819050919050565b610b4481610b31565b82525050565b6000602082019050610b5f6000830184610b3b565b92915050565b6000819050919050565b6000610b8a610b85610b8084610aa6565b610b65565b610aa6565b9050919050565b6000610b9c82610b6f565b9050919050565b6000610bae82610b91565b9050919050565b610bbe81610ba3565b82525050565b6000602082019050610bd96000830184610bb5565b92915050565b610be881610ac6565b82525050565b6000602082019050610c036000830184610bdf565b92915050565b610c1281610b31565b8114610c1d57600080fd5b50565b600081359050610c2f81610c09565b92915050565b600060208284031215610c4b57610c4a610aa1565b5b6000610c5984828501610c20565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ca9601b83610c62565b9150610cb482610c73565b602082019050919050565b60006020820190508181036000830152610cd881610c9c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d1982610b31565b9150610d2483610b31565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5957610d58610cdf565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d9e82610b31565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd157610dd0610cdf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e26600083610e0b565b9150610e3182610e16565b600082019050919050565b6000610e4782610e19565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e87600b83610c62565b9150610e9282610e51565b602082019050919050565b60006020820190508181036000830152610eb681610e7a565b9050919050565b6000610ec882610b31565b9150610ed383610b31565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f0c57610f0b610cdf565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f5182610b31565b9150610f5c83610b31565b925082610f6c57610f6b610f17565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f9681610f77565b8114610fa157600080fd5b50565b600081519050610fb381610f8d565b92915050565b6000819050919050565b610fcc81610fb9565b8114610fd757600080fd5b50565b600081519050610fe981610fc3565b92915050565b600081519050610ffe81610c09565b92915050565b600080600080600060a086880312156110205761101f610aa1565b5b600061102e88828901610fa4565b955050602061103f88828901610fda565b945050604061105088828901610fef565b935050606061106188828901610fef565b925050608061107288828901610fa4565b9150509295509295909350565b600061108a82610fb9565b915061109583610fb9565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110d4576110d3610cdf565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561111157611110610cdf565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114e5761114d610cdf565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118b5761118a610cdf565b5b82820290509291505056fea264697066735822122076d6a11b18cdb1ee22abc7f5465dd70a55dc38038f9c53db37cb81020871d9d764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}